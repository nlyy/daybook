1.正则表达式
	功能：
		判断功能：matches（String regex）;
		分割功能: split(String regex)
		替换功能: replaceAll(String regex,String replacement)
		获取功能: Pattern和Matcher
2.Math*
3.Random
4.System*
	系统类，
	成员方法：
		运行垃圾回收器：
		退出jvm
		获取当前时间的毫秒值
		数组复制
5.BigInteger
	针对大整数的运算，超出Int范围的数据
6.BigDecimal
	浮点数做运算，会丢失精度，
7.Date/DateFormat
	Date是日期类，可以精确到毫秒；
	构造方法：
		Date()
		Data(long time)
	成员方法：
		getTime()
		setTime(long time)
	日期和毫秒值的相互转换
	DateFormat针对日期进行格式化和针对字符串进行解析的类，但是是抽象类，所以使用其子类SimpleDateFormat
		SimpleDateFormat（String pattern）给定模式
		yyyy-MM-dd HH:mm:ss
		日期和字符串的转换：
			Date--String：format()
			String--Date: parse()
8.Calendar:
	日历类，封装了所有的日历字段，通过统一的方法根据穿入不同的日历字段可以获取值
	获取日历对象：Calendar rightNow = Calendar.getInstance();本质返回的是子类对象

9.数据结构：
	面试题：数据结构的优缺点？
	
	栈：先进后出

	队列：先进先出
 
	数组：存储同一种类型的多个元素的容器；     特点：查询快，增删慢！

	链表：由一个链子把多个结点连起组成的数据；  特点：查询慢，增删快！
		结点：由数据和地址组成（数据域和指针域组成）

10.List子类特点：
	ArrayList：底层数据结构是数组，查询快，增删慢；线程不安全，效率高
	Vector：底层数据结构是数组，查询快，增删慢；线程安全，效率低
	LinkedList：底层数据结构是链表，查询慢，增删快；线程不安全，效率高
	
	看需求使用：ArrayList最常用！
	
11.对象数组：
	即可以存储基本数据类型也可以存储引用数据类型；

12.集合（Collection）：
	操作对象，需要对多个对象进行存储；

	集合：长度可变，内容必须是引用类型，可以存储不同类型，不过一般存储的都是同一种类型；
	数组：长度不变，内容可以是基本类型，也可以是引用类型，只能存储一种数据类型；

	Collection
		List
			ArrayList：底层数据结构是数组，查询快，增删慢；线程不安全，效率高
			Vector：底层数据结构是数组，查询快，增删慢；线程安全，效率低
			LinkedList：底层数据结构是链表，查询慢，增删快；线程不安全，效率高
		Set
			HashSet
			TreeSet
	Collection功能：
		添加功能:add(),addAll()
		删除功能
		判断功能
		获取功能
		长度功能：size()
	
	迭代器：是集合的获取元素的方式，是依赖于集合而存在的；

		
13.集合（List）
	List是Collection的子接口；
	特点：有序（存储顺序和取出顺序一致），可重复
	特有功能：
		添加功能
		删除功能
		获取功能
		迭代器功能
		修改功能
	特有遍历方式：
		由size()和get()结合

	列表迭代器：
	
	并发修改异常：
		现象：迭代器遍历集合，集合修改集合元素
		原因：迭代器是依赖于集合的，而集合的改变迭代器并不知道
		解决：迭代器遍历，迭代器修改；（集合遍历，集合修改）

	常见数据结构：
		栈  ：先进后出
		队列：先进先出
		数组：查询快，增删慢
		链表：查询慢，增删快
14.
15.
16.
